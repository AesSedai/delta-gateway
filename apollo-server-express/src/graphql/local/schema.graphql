"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

type LiveSubscription {
  delta(lastUpdated: timestamptz): delta!
  id: String!
  query: subscription_root
}

"""mutation root"""
type Mutation {
  """
  delete data from the table: "authors"
  """
  delete_authors(
    """filter the rows which have to be deleted"""
    where: authors_bool_exp!
  ): authors_mutation_response

  """
  delete single row from the table: "authors"
  """
  delete_authors_by_pk(id: uuid!): authors

  """
  delete data from the table: "books"
  """
  delete_books(
    """filter the rows which have to be deleted"""
    where: books_bool_exp!
  ): books_mutation_response

  """
  delete single row from the table: "books"
  """
  delete_books_by_pk(id: uuid!): books

  """
  delete data from the table: "cache"
  """
  delete_cache(
    """filter the rows which have to be deleted"""
    where: cache_bool_exp!
  ): cache_mutation_response

  """
  delete single row from the table: "cache"
  """
  delete_cache_by_pk(id: uuid!): cache

  """
  delete data from the table: "events"
  """
  delete_events(
    """filter the rows which have to be deleted"""
    where: events_bool_exp!
  ): events_mutation_response

  """
  insert data into the table: "authors"
  """
  insert_authors(
    """the rows to be inserted"""
    objects: [authors_insert_input!]!

    """on conflict condition"""
    on_conflict: authors_on_conflict
  ): authors_mutation_response

  """
  insert a single row into the table: "authors"
  """
  insert_authors_one(
    """the row to be inserted"""
    object: authors_insert_input!

    """on conflict condition"""
    on_conflict: authors_on_conflict
  ): authors

  """
  insert data into the table: "books"
  """
  insert_books(
    """the rows to be inserted"""
    objects: [books_insert_input!]!

    """on conflict condition"""
    on_conflict: books_on_conflict
  ): books_mutation_response

  """
  insert a single row into the table: "books"
  """
  insert_books_one(
    """the row to be inserted"""
    object: books_insert_input!

    """on conflict condition"""
    on_conflict: books_on_conflict
  ): books

  """
  insert data into the table: "cache"
  """
  insert_cache(
    """the rows to be inserted"""
    objects: [cache_insert_input!]!

    """on conflict condition"""
    on_conflict: cache_on_conflict
  ): cache_mutation_response

  """
  insert a single row into the table: "cache"
  """
  insert_cache_one(
    """the row to be inserted"""
    object: cache_insert_input!

    """on conflict condition"""
    on_conflict: cache_on_conflict
  ): cache

  """
  insert data into the table: "events"
  """
  insert_events(
    """the rows to be inserted"""
    objects: [events_insert_input!]!

    """on conflict condition"""
    on_conflict: events_on_conflict
  ): events_mutation_response

  """
  insert a single row into the table: "events"
  """
  insert_events_one(
    """the row to be inserted"""
    object: events_insert_input!

    """on conflict condition"""
    on_conflict: events_on_conflict
  ): events

  """
  update data of the table: "authors"
  """
  update_authors(
    """sets the columns of the filtered rows to the given values"""
    _set: authors_set_input

    """filter the rows which have to be updated"""
    where: authors_bool_exp!
  ): authors_mutation_response

  """
  update single row of the table: "authors"
  """
  update_authors_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: authors_set_input
    pk_columns: authors_pk_columns_input!
  ): authors

  """
  update data of the table: "books"
  """
  update_books(
    """sets the columns of the filtered rows to the given values"""
    _set: books_set_input

    """filter the rows which have to be updated"""
    where: books_bool_exp!
  ): books_mutation_response

  """
  update single row of the table: "books"
  """
  update_books_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: books_set_input
    pk_columns: books_pk_columns_input!
  ): books

  """
  update data of the table: "cache"
  """
  update_cache(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: cache_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: cache_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: cache_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: cache_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: cache_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: cache_set_input

    """filter the rows which have to be updated"""
    where: cache_bool_exp!
  ): cache_mutation_response

  """
  update single row of the table: "cache"
  """
  update_cache_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: cache_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: cache_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: cache_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: cache_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: cache_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: cache_set_input
    pk_columns: cache_pk_columns_input!
  ): cache

  """
  update data of the table: "events"
  """
  update_events(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: events_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: events_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: events_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: events_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: events_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: events_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: events_set_input

    """filter the rows which have to be updated"""
    where: events_bool_exp!
  ): events_mutation_response
}

type Query {
  """
  fetch data from the table: "authors"
  """
  authors(
    """distinct select on columns"""
    distinct_on: [authors_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authors_order_by!]

    """filter the rows returned"""
    where: authors_bool_exp
  ): [authors!]!

  """
  fetch aggregated fields from the table: "authors"
  """
  authors_aggregate(
    """distinct select on columns"""
    distinct_on: [authors_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authors_order_by!]

    """filter the rows returned"""
    where: authors_bool_exp
  ): authors_aggregate!

  """fetch data from the table: "authors" using primary key columns"""
  authors_by_pk(id: uuid!): authors

  """
  fetch data from the table: "books"
  """
  books(
    """distinct select on columns"""
    distinct_on: [books_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [books_order_by!]

    """filter the rows returned"""
    where: books_bool_exp
  ): [books!]!

  """An aggregate relationship"""
  books_aggregate(
    """distinct select on columns"""
    distinct_on: [books_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [books_order_by!]

    """filter the rows returned"""
    where: books_bool_exp
  ): books_aggregate!

  """fetch data from the table: "books" using primary key columns"""
  books_by_pk(id: uuid!): books

  """
  fetch data from the table: "cache"
  """
  cache(
    """distinct select on columns"""
    distinct_on: [cache_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cache_order_by!]

    """filter the rows returned"""
    where: cache_bool_exp
  ): [cache!]!

  """
  fetch aggregated fields from the table: "cache"
  """
  cache_aggregate(
    """distinct select on columns"""
    distinct_on: [cache_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cache_order_by!]

    """filter the rows returned"""
    where: cache_bool_exp
  ): cache_aggregate!

  """fetch data from the table: "cache" using primary key columns"""
  cache_by_pk(id: uuid!): cache

  """
  fetch data from the table: "events"
  """
  events(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): [events!]!

  """
  fetch aggregated fields from the table: "events"
  """
  events_aggregate(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): events_aggregate!
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

type Subscription {
  """
  fetch data from the table: "authors"
  """
  authors(
    """distinct select on columns"""
    distinct_on: [authors_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authors_order_by!]

    """filter the rows returned"""
    where: authors_bool_exp
  ): [authors!]!

  """
  fetch aggregated fields from the table: "authors"
  """
  authors_aggregate(
    """distinct select on columns"""
    distinct_on: [authors_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authors_order_by!]

    """filter the rows returned"""
    where: authors_bool_exp
  ): authors_aggregate!

  """fetch data from the table: "authors" using primary key columns"""
  authors_by_pk(id: uuid!): authors

  """
  fetch data from the table: "books"
  """
  books(
    """distinct select on columns"""
    distinct_on: [books_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [books_order_by!]

    """filter the rows returned"""
    where: books_bool_exp
  ): [books!]!

  """An aggregate relationship"""
  books_aggregate(
    """distinct select on columns"""
    distinct_on: [books_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [books_order_by!]

    """filter the rows returned"""
    where: books_bool_exp
  ): books_aggregate!

  """fetch data from the table: "books" using primary key columns"""
  books_by_pk(id: uuid!): books

  """
  fetch data from the table: "cache"
  """
  cache(
    """distinct select on columns"""
    distinct_on: [cache_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cache_order_by!]

    """filter the rows returned"""
    where: cache_bool_exp
  ): [cache!]!

  """
  fetch aggregated fields from the table: "cache"
  """
  cache_aggregate(
    """distinct select on columns"""
    distinct_on: [cache_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cache_order_by!]

    """filter the rows returned"""
    where: cache_bool_exp
  ): cache_aggregate!

  """fetch data from the table: "cache" using primary key columns"""
  cache_by_pk(id: uuid!): cache

  """
  fetch data from the table: "events"
  """
  events(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): [events!]!

  """
  fetch aggregated fields from the table: "events"
  """
  events_aggregate(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): events_aggregate!
  live: LiveSubscription!
}

"""
columns and relationships of "authors"
"""
type authors {
  """
  fetch data from the table: "books"
  """
  books(
    """distinct select on columns"""
    distinct_on: [books_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [books_order_by!]

    """filter the rows returned"""
    where: books_bool_exp
  ): [books!]!

  """An aggregate relationship"""
  books_aggregate(
    """distinct select on columns"""
    distinct_on: [books_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [books_order_by!]

    """filter the rows returned"""
    where: books_bool_exp
  ): books_aggregate!
  created_at: timestamptz!
  id: uuid!
  name: String
  updated_at: timestamptz!
}

"""
aggregated selection of "authors"
"""
type authors_aggregate {
  aggregate: authors_aggregate_fields
  nodes: [authors!]!
}

"""
aggregate fields of "authors"
"""
type authors_aggregate_fields {
  count(columns: [authors_select_column!], distinct: Boolean): Int!
  max: authors_max_fields
  min: authors_min_fields
}

"""
Boolean expression to filter rows from the table "authors". All fields are combined with a logical 'AND'.
"""
input authors_bool_exp {
  _and: [authors_bool_exp!]
  _not: authors_bool_exp
  _or: [authors_bool_exp!]
  books: books_bool_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "authors"
"""
enum authors_constraint {
  """unique or primary key constraint"""
  authors_pkey
}

"""
input type for inserting data into table "authors"
"""
input authors_insert_input {
  books: books_arr_rel_insert_input
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type authors_max_fields {
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type authors_min_fields {
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "authors"
"""
type authors_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [authors!]!
}

"""
input type for inserting object relation for remote table "authors"
"""
input authors_obj_rel_insert_input {
  data: authors_insert_input!

  """on conflict condition"""
  on_conflict: authors_on_conflict
}

"""
on conflict condition type for table "authors"
"""
input authors_on_conflict {
  constraint: authors_constraint!
  update_columns: [authors_update_column!]! = []
  where: authors_bool_exp
}

"""Ordering options when selecting data from "authors"."""
input authors_order_by {
  books_aggregate: books_aggregate_order_by
  created_at: order_by
  id: order_by
  name: order_by
  updated_at: order_by
}

"""primary key columns input for table: authors"""
input authors_pk_columns_input {
  id: uuid!
}

"""
select columns of table "authors"
"""
enum authors_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

"""
input type for updating data in table "authors"
"""
input authors_set_input {
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
update columns of table "authors"
"""
enum authors_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

"""
columns and relationships of "books"
"""
type books {
  """An object relationship"""
  author: authors!
  author_id: uuid!
  created_at: timestamptz!
  id: uuid!
  isbn: String
  published_at: timestamp
  title: String
  updated_at: timestamptz!
}

"""
aggregated selection of "books"
"""
type books_aggregate {
  aggregate: books_aggregate_fields
  nodes: [books!]!
}

"""
aggregate fields of "books"
"""
type books_aggregate_fields {
  count(columns: [books_select_column!], distinct: Boolean): Int!
  max: books_max_fields
  min: books_min_fields
}

"""
order by aggregate values of table "books"
"""
input books_aggregate_order_by {
  count: order_by
  max: books_max_order_by
  min: books_min_order_by
}

"""
input type for inserting array relation for remote table "books"
"""
input books_arr_rel_insert_input {
  data: [books_insert_input!]!

  """on conflict condition"""
  on_conflict: books_on_conflict
}

"""
Boolean expression to filter rows from the table "books". All fields are combined with a logical 'AND'.
"""
input books_bool_exp {
  _and: [books_bool_exp!]
  _not: books_bool_exp
  _or: [books_bool_exp!]
  author: authors_bool_exp
  author_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  isbn: String_comparison_exp
  published_at: timestamp_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "books"
"""
enum books_constraint {
  """unique or primary key constraint"""
  books_pkey
}

"""
input type for inserting data into table "books"
"""
input books_insert_input {
  author: authors_obj_rel_insert_input
  author_id: uuid
  created_at: timestamptz
  id: uuid
  isbn: String
  published_at: timestamp
  title: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type books_max_fields {
  author_id: uuid
  created_at: timestamptz
  id: uuid
  isbn: String
  published_at: timestamp
  title: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "books"
"""
input books_max_order_by {
  author_id: order_by
  created_at: order_by
  id: order_by
  isbn: order_by
  published_at: order_by
  title: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type books_min_fields {
  author_id: uuid
  created_at: timestamptz
  id: uuid
  isbn: String
  published_at: timestamp
  title: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "books"
"""
input books_min_order_by {
  author_id: order_by
  created_at: order_by
  id: order_by
  isbn: order_by
  published_at: order_by
  title: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "books"
"""
type books_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [books!]!
}

"""
on conflict condition type for table "books"
"""
input books_on_conflict {
  constraint: books_constraint!
  update_columns: [books_update_column!]! = []
  where: books_bool_exp
}

"""Ordering options when selecting data from "books"."""
input books_order_by {
  author: authors_order_by
  author_id: order_by
  created_at: order_by
  id: order_by
  isbn: order_by
  published_at: order_by
  title: order_by
  updated_at: order_by
}

"""primary key columns input for table: books"""
input books_pk_columns_input {
  id: uuid!
}

"""
select columns of table "books"
"""
enum books_select_column {
  """column name"""
  author_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  isbn

  """column name"""
  published_at

  """column name"""
  title

  """column name"""
  updated_at
}

"""
input type for updating data in table "books"
"""
input books_set_input {
  author_id: uuid
  created_at: timestamptz
  id: uuid
  isbn: String
  published_at: timestamp
  title: String
  updated_at: timestamptz
}

"""
update columns of table "books"
"""
enum books_update_column {
  """column name"""
  author_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  isbn

  """column name"""
  published_at

  """column name"""
  title

  """column name"""
  updated_at
}

"""
columns and relationships of "cache"
"""
type cache {
  created_at: timestamptz!
  id: uuid!
  lastUpdated: timestamptz
  patch(
    """JSON select path"""
    path: String
  ): jsonb!
  query: String!
  result(
    """JSON select path"""
    path: String
  ): jsonb!
  updated_at: timestamptz!
}

"""
aggregated selection of "cache"
"""
type cache_aggregate {
  aggregate: cache_aggregate_fields
  nodes: [cache!]!
}

"""
aggregate fields of "cache"
"""
type cache_aggregate_fields {
  count(columns: [cache_select_column!], distinct: Boolean): Int!
  max: cache_max_fields
  min: cache_min_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input cache_append_input {
  patch: jsonb
  result: jsonb
}

"""
Boolean expression to filter rows from the table "cache". All fields are combined with a logical 'AND'.
"""
input cache_bool_exp {
  _and: [cache_bool_exp!]
  _not: cache_bool_exp
  _or: [cache_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  lastUpdated: timestamptz_comparison_exp
  patch: jsonb_comparison_exp
  query: String_comparison_exp
  result: jsonb_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "cache"
"""
enum cache_constraint {
  """unique or primary key constraint"""
  cache_pkey

  """unique or primary key constraint"""
  cache_query_lastupdated_unique
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input cache_delete_at_path_input {
  patch: [String!]
  result: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input cache_delete_elem_input {
  patch: Int
  result: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input cache_delete_key_input {
  patch: String
  result: String
}

"""
input type for inserting data into table "cache"
"""
input cache_insert_input {
  created_at: timestamptz
  id: uuid
  lastUpdated: timestamptz
  patch: jsonb
  query: String
  result: jsonb
  updated_at: timestamptz
}

"""aggregate max on columns"""
type cache_max_fields {
  created_at: timestamptz
  id: uuid
  lastUpdated: timestamptz
  query: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type cache_min_fields {
  created_at: timestamptz
  id: uuid
  lastUpdated: timestamptz
  query: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "cache"
"""
type cache_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [cache!]!
}

"""
on conflict condition type for table "cache"
"""
input cache_on_conflict {
  constraint: cache_constraint!
  update_columns: [cache_update_column!]! = []
  where: cache_bool_exp
}

"""Ordering options when selecting data from "cache"."""
input cache_order_by {
  created_at: order_by
  id: order_by
  lastUpdated: order_by
  patch: order_by
  query: order_by
  result: order_by
  updated_at: order_by
}

"""primary key columns input for table: cache"""
input cache_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input cache_prepend_input {
  patch: jsonb
  result: jsonb
}

"""
select columns of table "cache"
"""
enum cache_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  lastUpdated

  """column name"""
  patch

  """column name"""
  query

  """column name"""
  result

  """column name"""
  updated_at
}

"""
input type for updating data in table "cache"
"""
input cache_set_input {
  created_at: timestamptz
  id: uuid
  lastUpdated: timestamptz
  patch: jsonb
  query: String
  result: jsonb
  updated_at: timestamptz
}

"""
update columns of table "cache"
"""
enum cache_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  lastUpdated

  """column name"""
  patch

  """column name"""
  query

  """column name"""
  result

  """column name"""
  updated_at
}

type delta {
  hash: String!
  lastUpdated: timestamptz!
  patch: String!
}

"""
columns and relationships of "events"
"""
type events {
  connection_id: Int!
  event_data(
    """JSON select path"""
    path: String
  ): jsonb!
  event_number: Int!
  event_time: timestamptz!
  is_error: Boolean!
  label: String!
  latency: Int
  operation_id: Int!
}

"""
aggregated selection of "events"
"""
type events_aggregate {
  aggregate: events_aggregate_fields
  nodes: [events!]!
}

"""
aggregate fields of "events"
"""
type events_aggregate_fields {
  avg: events_avg_fields
  count(columns: [events_select_column!], distinct: Boolean): Int!
  max: events_max_fields
  min: events_min_fields
  stddev: events_stddev_fields
  stddev_pop: events_stddev_pop_fields
  stddev_samp: events_stddev_samp_fields
  sum: events_sum_fields
  var_pop: events_var_pop_fields
  var_samp: events_var_samp_fields
  variance: events_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input events_append_input {
  event_data: jsonb
}

"""aggregate avg on columns"""
type events_avg_fields {
  connection_id: Float
  event_number: Float
  latency: Float
  operation_id: Float
}

"""
Boolean expression to filter rows from the table "events". All fields are combined with a logical 'AND'.
"""
input events_bool_exp {
  _and: [events_bool_exp!]
  _not: events_bool_exp
  _or: [events_bool_exp!]
  connection_id: Int_comparison_exp
  event_data: jsonb_comparison_exp
  event_number: Int_comparison_exp
  event_time: timestamptz_comparison_exp
  is_error: Boolean_comparison_exp
  label: String_comparison_exp
  latency: Int_comparison_exp
  operation_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "events"
"""
enum events_constraint {
  """unique or primary key constraint"""
  events_label_connection_id_operation_id_event_number_unique
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input events_delete_at_path_input {
  event_data: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input events_delete_elem_input {
  event_data: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input events_delete_key_input {
  event_data: String
}

"""
input type for incrementing numeric columns in table "events"
"""
input events_inc_input {
  connection_id: Int
  event_number: Int
  latency: Int
  operation_id: Int
}

"""
input type for inserting data into table "events"
"""
input events_insert_input {
  connection_id: Int
  event_data: jsonb
  event_number: Int
  event_time: timestamptz
  is_error: Boolean
  label: String
  latency: Int
  operation_id: Int
}

"""aggregate max on columns"""
type events_max_fields {
  connection_id: Int
  event_number: Int
  event_time: timestamptz
  label: String
  latency: Int
  operation_id: Int
}

"""aggregate min on columns"""
type events_min_fields {
  connection_id: Int
  event_number: Int
  event_time: timestamptz
  label: String
  latency: Int
  operation_id: Int
}

"""
response of any mutation on the table "events"
"""
type events_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [events!]!
}

"""
on conflict condition type for table "events"
"""
input events_on_conflict {
  constraint: events_constraint!
  update_columns: [events_update_column!]! = []
  where: events_bool_exp
}

"""Ordering options when selecting data from "events"."""
input events_order_by {
  connection_id: order_by
  event_data: order_by
  event_number: order_by
  event_time: order_by
  is_error: order_by
  label: order_by
  latency: order_by
  operation_id: order_by
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input events_prepend_input {
  event_data: jsonb
}

"""
select columns of table "events"
"""
enum events_select_column {
  """column name"""
  connection_id

  """column name"""
  event_data

  """column name"""
  event_number

  """column name"""
  event_time

  """column name"""
  is_error

  """column name"""
  label

  """column name"""
  latency

  """column name"""
  operation_id
}

"""
input type for updating data in table "events"
"""
input events_set_input {
  connection_id: Int
  event_data: jsonb
  event_number: Int
  event_time: timestamptz
  is_error: Boolean
  label: String
  latency: Int
  operation_id: Int
}

"""aggregate stddev on columns"""
type events_stddev_fields {
  connection_id: Float
  event_number: Float
  latency: Float
  operation_id: Float
}

"""aggregate stddev_pop on columns"""
type events_stddev_pop_fields {
  connection_id: Float
  event_number: Float
  latency: Float
  operation_id: Float
}

"""aggregate stddev_samp on columns"""
type events_stddev_samp_fields {
  connection_id: Float
  event_number: Float
  latency: Float
  operation_id: Float
}

"""aggregate sum on columns"""
type events_sum_fields {
  connection_id: Int
  event_number: Int
  latency: Int
  operation_id: Int
}

"""
update columns of table "events"
"""
enum events_update_column {
  """column name"""
  connection_id

  """column name"""
  event_data

  """column name"""
  event_number

  """column name"""
  event_time

  """column name"""
  is_error

  """column name"""
  label

  """column name"""
  latency

  """column name"""
  operation_id
}

"""aggregate var_pop on columns"""
type events_var_pop_fields {
  connection_id: Float
  event_number: Float
  latency: Float
  operation_id: Float
}

"""aggregate var_samp on columns"""
type events_var_samp_fields {
  connection_id: Float
  event_number: Float
  latency: Float
  operation_id: Float
}

"""aggregate variance on columns"""
type events_variance_fields {
  connection_id: Float
  event_number: Float
  latency: Float
  operation_id: Float
}

scalar jsonb

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type subscription_root {
  """
  fetch data from the table: "authors"
  """
  authors(
    """distinct select on columns"""
    distinct_on: [authors_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authors_order_by!]

    """filter the rows returned"""
    where: authors_bool_exp
  ): [authors!]!

  """
  fetch aggregated fields from the table: "authors"
  """
  authors_aggregate(
    """distinct select on columns"""
    distinct_on: [authors_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authors_order_by!]

    """filter the rows returned"""
    where: authors_bool_exp
  ): authors_aggregate!

  """fetch data from the table: "authors" using primary key columns"""
  authors_by_pk(id: uuid!): authors

  """
  fetch data from the table: "books"
  """
  books(
    """distinct select on columns"""
    distinct_on: [books_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [books_order_by!]

    """filter the rows returned"""
    where: books_bool_exp
  ): [books!]!

  """An aggregate relationship"""
  books_aggregate(
    """distinct select on columns"""
    distinct_on: [books_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [books_order_by!]

    """filter the rows returned"""
    where: books_bool_exp
  ): books_aggregate!

  """fetch data from the table: "books" using primary key columns"""
  books_by_pk(id: uuid!): books

  """
  fetch data from the table: "cache"
  """
  cache(
    """distinct select on columns"""
    distinct_on: [cache_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cache_order_by!]

    """filter the rows returned"""
    where: cache_bool_exp
  ): [cache!]!

  """
  fetch aggregated fields from the table: "cache"
  """
  cache_aggregate(
    """distinct select on columns"""
    distinct_on: [cache_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cache_order_by!]

    """filter the rows returned"""
    where: cache_bool_exp
  ): cache_aggregate!

  """fetch data from the table: "cache" using primary key columns"""
  cache_by_pk(id: uuid!): cache

  """
  fetch data from the table: "events"
  """
  events(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): [events!]!

  """
  fetch aggregated fields from the table: "events"
  """
  events_aggregate(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): events_aggregate!
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}
