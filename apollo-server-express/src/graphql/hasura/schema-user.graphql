schema {
  query: query_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false

  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "authors"
"""
type authors {
  """
  fetch data from the table: "books"
  """
  books(
    """distinct select on columns"""
    distinct_on: [books_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [books_order_by!]

    """filter the rows returned"""
    where: books_bool_exp
  ): [books!]!
  created_at: timestamptz!
  id: uuid!
  name: String
  updated_at: timestamptz!
}

"""
Boolean expression to filter rows from the table "authors". All fields are combined with a logical 'AND'.
"""
input authors_bool_exp {
  _and: [authors_bool_exp!]
  _not: authors_bool_exp
  _or: [authors_bool_exp!]
  books: books_bool_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""Ordering options when selecting data from "authors"."""
input authors_order_by {
  books_aggregate: books_aggregate_order_by
  created_at: order_by
  id: order_by
  name: order_by
  updated_at: order_by
}

"""
select columns of table "authors"
"""
enum authors_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

"""
columns and relationships of "books"
"""
type books {
  """An object relationship"""
  author: authors
  author_id: uuid
  created_at: timestamptz!
  id: uuid!
  title: String
  updated_at: timestamptz!
}

"""
order by aggregate values of table "books"
"""
input books_aggregate_order_by {
  count: order_by
  max: books_max_order_by
  min: books_min_order_by
}

"""
Boolean expression to filter rows from the table "books". All fields are combined with a logical 'AND'.
"""
input books_bool_exp {
  _and: [books_bool_exp!]
  _not: books_bool_exp
  _or: [books_bool_exp!]
  author: authors_bool_exp
  author_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
order by max() on columns of table "books"
"""
input books_max_order_by {
  author_id: order_by
  created_at: order_by
  id: order_by
  title: order_by
  updated_at: order_by
}

"""
order by min() on columns of table "books"
"""
input books_min_order_by {
  author_id: order_by
  created_at: order_by
  id: order_by
  title: order_by
  updated_at: order_by
}

"""Ordering options when selecting data from "books"."""
input books_order_by {
  author: authors_order_by
  author_id: order_by
  created_at: order_by
  id: order_by
  title: order_by
  updated_at: order_by
}

"""
select columns of table "books"
"""
enum books_select_column {
  """column name"""
  author_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  title

  """column name"""
  updated_at
}

"""
columns and relationships of "history.authors"
"""
type history_authors {
  """An array relationship"""
  books(
    """distinct select on columns"""
    distinct_on: [history_books_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [history_books_order_by!]

    """filter the rows returned"""
    where: history_books_bool_exp
  ): [history_books!]!
  created_at: timestamptz!
  id: uuid!
  name: String
  updated_at: timestamptz!
  valid_from: timestamptz
  valid_to: timestamptz
}

"""
order by aggregate values of table "history.authors"
"""
input history_authors_aggregate_order_by {
  count: order_by
  max: history_authors_max_order_by
  min: history_authors_min_order_by
}

"""
Boolean expression to filter rows from the table "history.authors". All fields are combined with a logical 'AND'.
"""
input history_authors_bool_exp {
  _and: [history_authors_bool_exp!]
  _not: history_authors_bool_exp
  _or: [history_authors_bool_exp!]
  books: history_books_bool_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  valid_from: timestamptz_comparison_exp
  valid_to: timestamptz_comparison_exp
}

"""
order by max() on columns of table "history.authors"
"""
input history_authors_max_order_by {
  created_at: order_by
  id: order_by
  name: order_by
  updated_at: order_by
  valid_from: order_by
  valid_to: order_by
}

"""
order by min() on columns of table "history.authors"
"""
input history_authors_min_order_by {
  created_at: order_by
  id: order_by
  name: order_by
  updated_at: order_by
  valid_from: order_by
  valid_to: order_by
}

"""Ordering options when selecting data from "history.authors"."""
input history_authors_order_by {
  books_aggregate: history_books_aggregate_order_by
  created_at: order_by
  id: order_by
  name: order_by
  updated_at: order_by
  valid_from: order_by
  valid_to: order_by
}

"""
select columns of table "history.authors"
"""
enum history_authors_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at

  """column name"""
  valid_from

  """column name"""
  valid_to
}

"""
columns and relationships of "history.books"
"""
type history_books {
  """An array relationship"""
  author(
    """distinct select on columns"""
    distinct_on: [history_authors_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [history_authors_order_by!]

    """filter the rows returned"""
    where: history_authors_bool_exp
  ): [history_authors!]!
  author_id: uuid
  created_at: timestamptz!
  id: uuid!
  title: String
  updated_at: timestamptz!
  valid_from: timestamptz
  valid_to: timestamptz
}

"""
order by aggregate values of table "history.books"
"""
input history_books_aggregate_order_by {
  count: order_by
  max: history_books_max_order_by
  min: history_books_min_order_by
}

"""
Boolean expression to filter rows from the table "history.books". All fields are combined with a logical 'AND'.
"""
input history_books_bool_exp {
  _and: [history_books_bool_exp!]
  _not: history_books_bool_exp
  _or: [history_books_bool_exp!]
  author: history_authors_bool_exp
  author_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  valid_from: timestamptz_comparison_exp
  valid_to: timestamptz_comparison_exp
}

"""
order by max() on columns of table "history.books"
"""
input history_books_max_order_by {
  author_id: order_by
  created_at: order_by
  id: order_by
  title: order_by
  updated_at: order_by
  valid_from: order_by
  valid_to: order_by
}

"""
order by min() on columns of table "history.books"
"""
input history_books_min_order_by {
  author_id: order_by
  created_at: order_by
  id: order_by
  title: order_by
  updated_at: order_by
  valid_from: order_by
  valid_to: order_by
}

"""Ordering options when selecting data from "history.books"."""
input history_books_order_by {
  author_aggregate: history_authors_aggregate_order_by
  author_id: order_by
  created_at: order_by
  id: order_by
  title: order_by
  updated_at: order_by
  valid_from: order_by
  valid_to: order_by
}

"""
select columns of table "history.books"
"""
enum history_books_select_column {
  """column name"""
  author_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  title

  """column name"""
  updated_at

  """column name"""
  valid_from

  """column name"""
  valid_to
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "authors"
  """
  authors(
    """distinct select on columns"""
    distinct_on: [authors_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authors_order_by!]

    """filter the rows returned"""
    where: authors_bool_exp
  ): [authors!]!

  """fetch data from the table: "authors" using primary key columns"""
  authors_by_pk(id: uuid!): authors

  """
  fetch data from the table: "books"
  """
  books(
    """distinct select on columns"""
    distinct_on: [books_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [books_order_by!]

    """filter the rows returned"""
    where: books_bool_exp
  ): [books!]!

  """fetch data from the table: "books" using primary key columns"""
  books_by_pk(id: uuid!): books

  """
  fetch data from the table: "history.authors"
  """
  history_authors(
    """distinct select on columns"""
    distinct_on: [history_authors_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [history_authors_order_by!]

    """filter the rows returned"""
    where: history_authors_bool_exp
  ): [history_authors!]!

  """
  fetch data from the table: "history.books"
  """
  history_books(
    """distinct select on columns"""
    distinct_on: [history_books_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [history_books_order_by!]

    """filter the rows returned"""
    where: history_books_bool_exp
  ): [history_books!]!
}

type subscription_root {
  """
  fetch data from the table: "authors"
  """
  authors(
    """distinct select on columns"""
    distinct_on: [authors_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authors_order_by!]

    """filter the rows returned"""
    where: authors_bool_exp
  ): [authors!]!

  """fetch data from the table: "authors" using primary key columns"""
  authors_by_pk(id: uuid!): authors

  """
  fetch data from the table: "books"
  """
  books(
    """distinct select on columns"""
    distinct_on: [books_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [books_order_by!]

    """filter the rows returned"""
    where: books_bool_exp
  ): [books!]!

  """fetch data from the table: "books" using primary key columns"""
  books_by_pk(id: uuid!): books

  """
  fetch data from the table: "history.authors"
  """
  history_authors(
    """distinct select on columns"""
    distinct_on: [history_authors_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [history_authors_order_by!]

    """filter the rows returned"""
    where: history_authors_bool_exp
  ): [history_authors!]!

  """
  fetch data from the table: "history.books"
  """
  history_books(
    """distinct select on columns"""
    distinct_on: [history_books_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [history_books_order_by!]

    """filter the rows returned"""
    where: history_books_bool_exp
  ): [history_books!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}
