services:
    db:
        image: postgres:13.2-alpine
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
        ports:
            - ${POSTGRES_PORT_HOST}:${POSTGRES_PORT_CONTAINER}
        volumes:
            - db:/var/lib/postgres/data
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
            interval: 5s
            timeout: 5s
            retries: 5
        networks:
            - app

    redis:
        image: redis:6.2-rc3-alpine
        command: redis-server
        ports:
            - ${REDIS_PORT_HOST}:${REDIS_PORT_CONTAINER}
        networks:
            - app

    graphql-engine:
        image: hasura/graphql-engine:v2.1.1.cli-migrations-v3
        ports:
            - ${HASURA_PORT_HOST}:${HASURA_PORT_CONTAINER}
        healthcheck:
            test:
                [
                    "CMD",
                    "bash",
                    "-c",
                    "exec 5<>/dev/tcp/127.0.0.1/${HASURA_PORT_CONTAINER} && echo -e 'GET /healthz HTTP/1.1\n\n' >&5 && cat <&5 | head -n 1 | grep 200"
                ]
            interval: 30s
            timeout: 3s
        depends_on:
            db:
                condition: service_healthy
        restart: always
        environment:
            HASURA_GRAPHQL_LOG_LEVEL: warn
            HASURA_GRAPHQL_DATABASE_URL: ${HASURA_GRAPHQL_DATABASE_URL}
            HASURA_GRAPHQL_ENABLE_REMOTE_SCHEMA_PERMISSIONS: "true"
            ## enable the console served by server
            HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
            ## enable debugging mode. It is recommended to disable this in production
            HASURA_GRAPHQL_DEV_MODE: "true"
            # HASURA_GRAPHQL_MIGRATIONS_DIR: /hasura-migrations
            # HASURA_GRAPHQL_METADATA_DIR: /hasura-metadata
        # volumes:
        #     - ./hasura/migrations:/hasura-migrations
        #     - ./hasura/metadata:/hasura-metadata
        networks:
            - app

    client:
        build:
            context: ./client
            args:
                PORT: ${CLIENT_PORT_CONTAINER}
        environment:
            CHOKIDAR_USEPOLLING: "true"
            FAST_REFRESH: "true"
            SERVER_URL: ${SERVER_URL}
        volumes:
            - ./client:/usr/src/app
        ports:
            - ${CLIENT_PORT_HOST}:${CLIENT_PORT_CONTAINER}
        networks:
            - app

    # helix-express:
    #     build:
    #         context: ./helix-express
    #         args:
    #             PORT: ${HELIX_EXPRESS_SERVER_PORT_CONTAINER}
    #     environment:
    #         NODE_ENV: "production"
    #         SERVER_PORT_CONTAINER: ${HELIX_EXPRESS_SERVER_PORT_CONTAINER}
    #         HASURA_HTTP_GRAPHQL_URL: ${HASURA_HTTP_GRAPHQL_URL}
    #         HASURA_WS_GRAPHQL_URL: ${HASURA_WS_GRAPHQL_URL}
    #         HASURA_HTTP_METADATA_URL: ${HASURA_HTTP_METADATA_URL}
    #         HASURA_HTTP_ROOT_URL: ${HASURA_HTTP_ROOT_URL}
    #         OTLP_COLLECTOR_URL: ${OTLP_COLLECTOR_URL}
    #     depends_on:
    #         graphql-engine:
    #             condition: service_healthy
    #     volumes:
    #         - ./helix-express:/usr/src/app
    #     ports:
    #         - ${HELIX_EXPRESS_SERVER_PORT_HOST}:${HELIX_EXPRESS_SERVER_PORT_CONTAINER}
    #     healthcheck:
    #         test: ["CMD-SHELL", "netstat -tulnp | grep ${HELIX_EXPRESS_SERVER_PORT_CONTAINER}"]
    #         interval: 10s
    #         timeout: 5s
    #         retries: 5
    #     networks:
    #         - app

    # helix-fastify:
    #     build:
    #         context: ./helix-fastify
    #         args:
    #             PORT: ${HELIX_FASTIFY_SERVER_PORT_CONTAINER}
    #     environment:
    #         NODE_ENV: "production"
    #         SERVER_PORT_CONTAINER: ${HELIX_FASTIFY_SERVER_PORT_CONTAINER}
    #         HASURA_HTTP_GRAPHQL_URL: ${HASURA_HTTP_GRAPHQL_URL}
    #         HASURA_WS_GRAPHQL_URL: ${HASURA_WS_GRAPHQL_URL}
    #         HASURA_HTTP_METADATA_URL: ${HASURA_HTTP_METADATA_URL}
    #         HASURA_HTTP_ROOT_URL: ${HASURA_HTTP_ROOT_URL}
    #         OTLP_COLLECTOR_URL: ${OTLP_COLLECTOR_URL}
    #     depends_on:
    #         graphql-engine:
    #             condition: service_healthy
    #     volumes:
    #         - ./helix-fastify:/usr/src/app
    #     ports:
    #         - ${HELIX_FASTIFY_SERVER_PORT_HOST}:${HELIX_FASTIFY_SERVER_PORT_CONTAINER}
    #     healthcheck:
    #         test: ["CMD-SHELL", "netstat -tulnp | grep ${HELIX_FASTIFY_SERVER_PORT_CONTAINER}"]
    #         interval: 10s
    #         timeout: 5s
    #         retries: 5
    #     networks:
    #         - app

    apollo-server-express:
        build:
            context: ./apollo-server-express
            args:
                PORT: ${APOLLO_SERVER_EXPRESS_SERVER_PORT_CONTAINER}
        environment:
            NODE_ENV: "production"
            SERVER_PORT_CONTAINER: ${APOLLO_SERVER_EXPRESS_SERVER_PORT_CONTAINER}
            HASURA_HTTP_GRAPHQL_URL: ${HASURA_HTTP_GRAPHQL_URL}
            HASURA_WS_GRAPHQL_URL: ${HASURA_WS_GRAPHQL_URL}
            HASURA_HTTP_METADATA_URL: ${HASURA_HTTP_METADATA_URL}
            HASURA_HTTP_ROOT_URL: ${HASURA_HTTP_ROOT_URL}
            OTLP_COLLECTOR_URL: ${OTLP_COLLECTOR_URL}
        # command: "pm2 start build/server.js -i 5 --no-daemon --node-args=\"--experimental-wasm-simd --experimental-specifier-resolution=node --loader ts-node/esm\""
        depends_on:
            graphql-engine:
                condition: service_healthy
        volumes:
            - ./apollo-server-express:/usr/src/app
        ports:
            - ${APOLLO_SERVER_EXPRESS_SERVER_PORT_HOST}:${APOLLO_SERVER_EXPRESS_SERVER_PORT_CONTAINER}
        healthcheck:
            test: ["CMD-SHELL", "netstat -tulnp | grep ${APOLLO_SERVER_EXPRESS_SERVER_PORT_CONTAINER}"]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - app

    # Collector
    otel-collector:
        image: otel/opentelemetry-collector-contrib:0.42.0
        command: ["--config=/conf/collector-config.yaml"]
        volumes:
            - ./collector-config.yaml:/conf/collector-config.yaml
        ports:
            - 4317:4317
            - 4318:4318
            - 9464:9464
            - 55681:55681
        depends_on:
            - jaeger-all-in-one
        networks:
            - app

    # Jaeger
    jaeger-all-in-one:
        image: jaegertracing/all-in-one:1.30.0
        ports:
            - 5775:5775/udp
            - 6831:6831/udp
            - 6832:6832/udp
            - 5778:5778
            - 16686:16686
            - 14250:14250
            - 14268:14268
        networks:
            - app

networks:
    app:
        driver: bridge

volumes:
    db:
        external: true
