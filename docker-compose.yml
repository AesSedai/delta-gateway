services:
    db:
        image: postgres:13.2-alpine
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
        ports:
            - ${POSTGRES_PORT_HOST}:${POSTGRES_PORT_CONTAINER}
        volumes:
            - db:/var/lib/postgres/data
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
            interval: 5s
            timeout: 5s
            retries: 5
        networks:
            - app

    redis:
        image: redis:6.2-rc3-alpine
        command: redis-server
        ports:
            - ${REDIS_PORT_HOST}:${REDIS_PORT_CONTAINER}
        networks:
            - app

    graphql-engine:
        image: hasura/graphql-engine:v2.1.1.cli-migrations-v3
        ports:
            - ${HASURA_PORT_HOST}:${HASURA_PORT_CONTAINER}
        depends_on:
            db:
                condition: service_healthy
            server:
                condition: service_healthy
        restart: always
        environment:
            HASURA_GRAPHQL_LOG_LEVEL: warn
            HASURA_GRAPHQL_DATABASE_URL: ${HASURA_GRAPHQL_DATABASE_URL}
            HASURA_GRAPHQL_ENABLE_REMOTE_SCHEMA_PERMISSIONS: "true"
            ## enable the console served by server
            HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
            ## enable debugging mode. It is recommended to disable this in production
            HASURA_GRAPHQL_DEV_MODE: "true"
        #     HASURA_GRAPHQL_METADATA_DIR: /hasura-metadata
        # volumes:
        #     - ./hasura/metadata:/hasura-metadata
        networks:
            - app

    client:
        build:
            context: ./client
            args:
                PORT: ${CLIENT_PORT_CONTAINER}
        # command: npm run build
        # command: npx serve -s build -l 3000
        environment:
            CHOKIDAR_USEPOLLING: "true"
            FAST_REFRESH: "true"
            SERVER_URL: ${SERVER_URL}
        volumes:
            - ./client:/usr/src/app
        ports:
            - ${CLIENT_PORT_HOST}:${CLIENT_PORT_CONTAINER}
        networks:
            - app

    server:
        build:
            context: ./server
            args:
                PORT: ${SERVER_PORT_CONTAINER}
        environment:
            SERVER_PORT_CONTAINER: ${SERVER_PORT_CONTAINER}
            HASURA_GRAPHQL_URL: ${HASURA_GRAPHQL_URL}
            HASURA_METADATA_URL: ${HASURA_METADATA_URL}
        volumes:
            - ./server:/usr/src/app
        ports:
            - ${SERVER_PORT_HOST}:${SERVER_PORT_CONTAINER}
        healthcheck:
            test: ["CMD-SHELL", "netstat -tulnp | grep ${SERVER_PORT_CONTAINER}"]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - app

networks:
    app:
        driver: bridge

volumes:
    db:
        external: true
